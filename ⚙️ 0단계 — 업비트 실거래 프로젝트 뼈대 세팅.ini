⚙️ 0단계 — 업비트 실거래 프로젝트 뼈대 세팅

Claude 프롬프트

당신은 파이썬 퀀트 엔지니어이자 보안전문가입니다. 
목표: 업비트 REST API 실거래 자동매매 프로젝트를 위한 안전한 기본 구조를 생성합니다.

산출물:
- 프로젝트 트리와 각 파일의 역할 요약 (README.md 포함)
- requirements.txt: requests, python-dotenv, pandas, pyjwt
- src/config.py: .env 로부터 access_key, secret_key, server_url 로딩
- src/upbit_api.py: 업비트 API 래퍼 (잔고조회, 시세조회, 주문, 주문취소)
- src/trader.py: 단일 종목 매수/매도 함수, 수량·가격 계산, 예외처리
- src/logger.py: 로깅 설정(파일+콘솔)
- src/utils/signature.py: JWT 서명 생성 로직
- scripts/check_connection.py: 시세조회·계좌조회 테스트
제약:
- API 키는 절대 코드에 직접 포함하지 말고 .env로만 로드
- 모든 요청은 try-except 처리
- 주문 전 계좌 잔고 확인, 최소 주문단위 자동 반영
테스트:
- `python scripts/check_connection.py` 실행 시 내 계좌정보·현재가·코인리스트 출력
이제 전체 코드와 README를 작성하세요.

⚙️ 1단계 — 실시간 가격 모니터링 + 수동 트리거 주문

목표: 업비트 실시간 시세 모니터링 및 수동 주문 시스템 구축.

산출물:
- src/price_watcher.py: 실시간 가격 조회 루프 (1초 주기)
- src/trader.py: market_buy(), limit_buy(), limit_sell(), cancel_order() 구현
- scripts/manual_trade.py: 콘솔 입력 기반 주문 실행 (ex: "buy BTC 0.01 market")
제약:
- 모든 주문 전 “확인 메시지” 출력 후 사용자가 yes 입력해야 실제 주문 전송
- 주문 결과 로그는 logs/orders.log에 기록
테스트:
- 시세 모니터링 중 키보드 입력으로 주문→주문 체결 확인까지 정상 동작
코드를 작성하세요.

⚙️ 2단계 — 자동 매매 루프 (기본 전략: RSI+볼린저 되돌림 스캘퍼)

Claude 프롬프트

목표: 업비트 실시간 시세를 기반으로 "RSI+볼린저 되돌림 스캘퍼" 자동 매매 루프를 구현합니다.
- 횡보장에서 짧게 여러 번 진입/청산하는 스캘핑 전략입니다.
- 진입 조건(예시): 가격이 볼린저 하단 하향 이탈 AND RSI<30 → 매수
- 청산 조건(예시): +0.5% 익절 또는 -0.4% 손절 또는 보유 5분 경과
- 필터(선택): RSI가 40~60 범위일 때만 전략 가동(횡보 필터)

산출물:
- src/strategy/rsi_bollinger_scalper.py
  - 함수: generate_signal(candles)->{"action": "BUY"/"SELL"/"HOLD", "meta": {...}}
  - 파라미터: rsi_window=14, bb_window=20, bb_std=2.0, take_profit=0.005, stop_loss=-0.004, max_hold_sec=300, use_ranging_filter=True
  - 입력 candles 스키마: [{'timestamp':ms,'opening_price','high_price','low_price','trade_price','candle_acc_trade_volume'}, ...] (최근이 0번이든 -1번이든 명확히 문서화)
- src/state_manager.py
  - 현재 포지션 상태와 진입가/시간을 JSON으로 저장/로드 (예: .state/trade_state.json)
- src/runner.py
  - 실시간 루프: 분봉(1m) 캔들 50개 갱신 → 전략 판단 → 주문 실행
  - 매수: 시장가 매수(업비트 규격상 ord_type='price', side='bid', price=KRW 금액)
  - 매도: 시장가 매도(ord_type='market', side='ask', volume=수량)
  - 체결 후 10초 쿨다운
  - 포지션 1개만 유지, 중복 진입 금지

제약:
- 실거래 안전장치: 기본값 DRYRUN (env: TRADING_MODE=DRYRUN). LIVE가 아닐 시 주문은 로그만 남김.
- API Rate Limit(초당 8회) 준수: 루프는 최소 1초 주기 이상
- 수수료·슬리피지 고려 주석 명시
- 예외 발생 시 재시도 전 0.5~1.0초 backoff

테스트:
- 유동성 높은 마켓(KRW-BTC 또는 KRW-ETH) 1분봉으로 시그널 생성/주문 함수가 정상 호출되는지 확인
- DRYRUN에서 매수/매도 시뮬레이션 후 state가 적절히 갱신되는지 확인
- take_profit/stop_loss/max_hold_sec 조건 각각으로 SELL 트리거가 되는지 단위 테스트

출력:
- 각 파일의 전체 코드
- README에 실행법: `python3 src/runner.py --market KRW-BTC --krw 5000`


⚙️ 3단계 — 리스크 관리 및 방어로직 추가

목표: 초단타 스캘핑에서 필수인 리스크 관리 레이어를 추가합니다.

산출물:
- src/risk_manager.py
  - check_pre_trade(market, krw_amount or volume)->(bool, reason)
    - 1회 주문 금액 상한 (env: MAX_ORDER_KRW, 기본 10000)
    - 일일 최대 손실률/손실금액 제한 (env: DAILY_MAX_DD_PCT, DAILY_MAX_LOSS_KRW)
    - 포지션 수 제한 (최대 1개)
    - 거래 가능 시간대 제한(선택: 예, 심야 비활성)
  - handle_rate_limit(response or exception): 429 등 발생 시 지수 백오프
  - is_ranging_market(candles)->bool: BB폭/MA 기반 또는 RSI 40~60 필터 (2단계 파라미터와 연동)
- src/runner.py 통합
  - 주문 전 반드시 check_pre_trade 통과해야 실행
  - 거절 시 로그로 사유 기록하고 쿨다운

제약:
- 모든 상한/임계값은 .env 또는 config에서 외부화 (하드코딩 금지)
- 위험 이벤트(연속 손절 3회 등) 시 즉시 전략 중지 및 알림 훅(후속 4단계) 호출
- 예외/네트워크 에러 재시도 시 nonce/JWT 재생성

테스트:
- MAX_ORDER_KRW 초과 시 주문 차단되는지
- 포지션 보유 중 중복 매수 차단되는지
- 429/네트워크 오류에서 backoff 후 정상 복구되는지
- is_ranging_market=True일 때만 시그널이 실행되는지

⚙️ 4단계 — 텔레그램 알림 & 실행 로그 모니터링

Claude 프롬프트

목표: 주문, 체결, 손절/익절, 중단 이벤트를 텔레그램으로 알림하고 거래 로그를 파일로 남깁니다.

산출물:
- src/notify/telegram.py
  - send_telegram(msg: str) -> None
  - 환경변수: TG_BOT_TOKEN, TG_CHAT_ID. 미설정 시 알림 비활성(로그만)
- src/runner.py
  - 이벤트 발생 시 알림:
    - 매수 체결: "[시간][KRW-BTC][BUY][price=xxxxx][krw=5000]"
    - 익절:     "[시간][KRW-BTC][TP][entry=xxxxx][exit=xxxxx][pnl_pct=+0.52%]"
    - 손절:     "[시간][KRW-BTC][SL][entry=xxxxx][exit=xxxxx][pnl_pct=-0.40%]"
    - 전략 중지/재개, 연속 손실 경고 등
- logs/trades.csv
  - 컬럼: ts, market, side, price, volume, pnl_pct, reason(TP/SL/TIMEOUT), state_uuid
  - runner에서 체결·청산 시 append

제약:
- 포맷 일관성 유지(파싱 가능하도록 구분자 고정)
- 텔레그램 전송 실패 시 예외 전파 금지(로그로만 기록하고 계속 진행)
- 로그 파일 회전은 5단계에서 처리

테스트:
- TG 미설정 시 경고만 로그 출력
- DRYRUN에서도 알림·CSV 기록이 정상 동작
- 실제 주문 체결 시 텔레그램 수신 확인

⚙️ 5단계 — 안전 시작 스크립트 & 배포 설정

Claude 프롬프트

목표: RSI+볼린저 스캘퍼를 안전하게 시작/중지하는 런처를 작성합니다. 실전 운영 체크리스트를 포함합니다.

산출물:
- scripts/start_trading.py
  - 사전 점검:
    - .env 로드 및 필수 키(UPBIT_ACCESS_KEY/SECRET_KEY/UPBIT_SERVER_URL) 확인
    - TRADING_MODE 표시(DRYRUN/LIVE), LIVE일 경우 재확인 프롬프트
    - 네트워크 체크(마켓 목록/틱커 1회 조회)
    - 텔레그램 설정 여부 안내
    - 전일/당일 실현손익 요약(가능하면 logs/trades.csv 집계)
    - 마지막 포지션 상태(state_manager) 확인(보유 중이면 재진입 금지)
  - runner.py 프로세스 실행 (인자: --market, --krw, --interval=60 등)
- scripts/stop_trading.py
  - 실행 중 루프 안전 중단
  - 미체결 주문 취소, 보유 포지션 정리 옵션(--flatten)
  - 종료 알림(텔레그램)
- 로깅/배포
  - logger 회전: 파일 최대 10MB, 백업 5개 유지
  - UTC 기준 타임스탬프
  - README 운영 섹션:
    - 실행 전 체크리스트(잔고/인터넷/시간동기/텔레그램 테스트/DRYRUN 확인)
    - 비상 정지 방법(킬스위치 env 또는 stop 스크립트)
    - 재시작 시 state 복원 순서

제약:
- LIVE 실행 전 반드시 "YES" 확인 입력 받아야 진행
- stop 시 예외 상황(네트워크 단절)에서도 최소 2회 재시도 후 안전 종료
- 모든 경로/파일 유무 미리 생성/검증

테스트:
- DRYRUN 모드에서 10분 실행 후 stop → 포지션/주문 정상 정리
- LIVE 모드에서 소액(5,000원) 1~2회 체결 후 stop → trades.csv 기록/알림/상태정리 확인

운영 팁 (짧게)

목표수익·손절폭은 **거래 수수료(왕복 약 0.1%)**를 이긴 뒤에도 이익이 남도록 설정(예: +0.5% / -0.4%).

횡보 필터가 핵심이다. use_ranging_filter=True로 고정하고, RSI 40~60, 볼린저 밴드폭/MA 비율 같은 조건을 둘 다 만족할 때만 가동하면 과잉 트레이드를 줄인다.

LIVE 전 최소 수 시간 DRYRUN으로 로그를 꼭 쌓아보라. 슬리피지/체결 지연/429 빈도 감이 온다.
